#+TITLE: Contemplation Machine Quickstart Guide
#+AUTHOR: Your Name
#+DATE: [2025-05-06]
#+OPTIONS: ^:nil

#+HTML_HEAD_EXTRA:<link rel="stylesheet" href="assets/toc-nav.css" />
#+HTML_HEAD_EXTRA:<script src="assets/toc-nav.js"></script>
HTML Version: [[file+sys:contemplation-machine-quickstart.html]]


* Testing Contemplation Machine from Scratch

** Clone and Set Up Environment
#+begin_src bash
# Create a dedicated test directory to avoid conflicts with existing files
mkdir -p ~/test-meditation-app
cd ~/test-meditation-app
find .

# Clone the repository
git clone https://github.com/andreaswittmann/contemplation-machine.git
# update the local git repository
cd ~/test-meditation-app/contemplation-machine
git pull
git status
# List the files in the repository
ls -la





# Create the environment file from the provided sample
cp .env.sample .env

cat .env
# Meditation App Environment Configuration

bash # create sub-shell so exports will not affect the current shell
export OPENAI_API_KEY=
export OPENAI_API_KEY=sk-12345678
export ELEVENLABS_API_KEY=sk-foobarbaz
export PORT=8099
export HOST=0.0.0.0

# create a perl one-liner that replaces the API-Keys with the values of the shell varibales.
perl -pi -e 's/(OPENAI_API_KEY=).*/$1$ENV{OPENAI_API_KEY}/;' .env
perl -pi -e 's/(ELEVENLABS_API_KEY=).*/$1$ENV{ELEVENLABS_API_KEY}/;' .env
perl -pi -e 's/(PORT=).*/$1$ENV{PORT}/;' .env
perl -pi -e 's/(HOST=).*/$1$ENV{HOST}/;' .env
cat .env 
exit # subshell

echo "OPENAI_API_KEY: $OPENAI_API_KEY"
echo "ELEVENLABS_API_KEY: $ELEVENLABS_API_KEY"
echo "PORT: $PORT"
echo "HOST: $HOST"

# Display the environment file contents to verify configuration
cat .env


docker-compose up -d
docker-compose down
docker-compose down --timeout 0

#+end_src

This clones the repository and creates a basic environment configuration with API keys and port settings.

** Understanding the Environment Configuration

Our Docker setup is configured to:

1. Always use port 3001 *inside* the container (fixed)
2. Use the PORT from your .env file for the *external* port (customizable)
3. Mount the .env file as a volume, so you can change API keys without rebuilding
4. Default to port 8088 for external access if no PORT is specified

#+begin_src bash
# View the docker-compose.yml file to understand the configuration
cat docker-compose.yml
#+end_src

The key points in the docker-compose.yml are:
- `"${PORT:-8088}:3001"` - Maps your chosen external port to the fixed internal port
   - If PORT is not specified, 8088 is used as the default external port
- `./.env:/app/.env` - Mounts your .env file into the container
- `PORT=3001` in the environment section - Forces the internal port to remain fixed

** Create a Container for local testing.

Now I want to test the application locally. I will use the settings from the .env file to create a container and run it.

#+begin_src bash
# Build the Docker containers with a clean cache to ensure fresh builds
docker-compose build --no-cache

# Start the containers in detached mode to run in the background
docker-compose up -d

# Verify that the containers are running properly
docker ps | grep contemplation-machine

# Access the application in your browser at localhost:PORT (where PORT is from your .env file)
# For example, if PORT=8077 in your .env file, the URL would be http://localhost:8077
#+end_src

** Changing Configuration Without Rebuilding

You can change API keys or the external port without rebuilding the container:

#+begin_src bash
# Edit the .env file to change API keys or external port
nano .env

# Restart the container to apply changes
docker-compose restart

# Alternatively, you can override the PORT when starting the container
PORT=9999 docker-compose up -d

# Check the application is running on the new port
curl http://localhost:9999/api/health
#+end_src


* Creating Multi-Arch Docker Image

** Build for Multiple Platforms
#+begin_src bash
# Log in to Docker Hub
docker login

# Set up buildx builder
docker buildx create --name mybuilder --use

# Build and push multi-arch image
docker buildx build --platform linux/amd64,linux/arm64 \
  -t yourusername/contemplation-machine:latest \
  --push .
#+end_src

This builds Docker images for both AMD64 (standard computers) and ARM64 (Apple Silicon, etc.) architectures and pushes them to Docker Hub.

* Testing Docker Hub Image via Command Line

** Pull and Run from Docker Hub
#+begin_src bash
# Create data directory for persistence
mkdir -p ~/contemplation-data

# Create a simple .env file with your API keys and desired port
cat > ~/contemplation-env << EOF
OPENAI_API_KEY=your_openai_key_here
ELEVENLABS_API_KEY=your_elevenlabs_key_here
PORT=8088
EOF

# Run the container with the .env file mounted
docker run -d \
  --name meditation \
  -p 8088:3001 \
  -v ~/contemplation-data:/app/data \
  -v ~/contemplation-env:/app/.env \
  yourusername/contemplation-machine:latest
#+end_src

The application should now be running and accessible at http://localhost:8088 (or whatever port you specified).

** Using the Docker Desktop Default Port

When downloading and running the container from Docker Hub via Docker Desktop:

1. The container exposes port 8088 by default for external access
2. The internal application always runs on port 3001
3. Docker Desktop will automatically map port 8088 to the container

You can verify this mapping in Docker Desktop's port settings for the container.

If you need to change the port mapping after starting the container:
1. Stop the container
2. Edit the port settings in Docker Desktop
3. Restart the container

** Verify Container Status
#+begin_src bash
# Check container is running
docker ps

# View container logs
docker logs meditation
#+end_src

These commands confirm the container is running properly.

** Test Application Functionality
#+begin_src bash
# Simple curl test to verify API is responding
curl http://localhost:8088/api/health
#+end_src

If working correctly, this should return a success response.

** Clean up
After testing and pushing the image we clean up.

#+begin_src bash
# Listing:
docker ps -a
docker stop meditation
docker rm meditation

# Stop and remove all running containers from the test
docker-compose down

# Navigate to the test directory
cd ~/test-meditation-app

# List all files and directories before removal for verification
find .

# Remove the test repository
rm -rf contemplation-machine
rm -rf ./*
pwd

#+end_src


#+begin_src bash
# Listing:



#+end_src


